@startuml
skinparam style strictuml
skinparam classFontStyle Bold
skinparam classAttributeIconSize 0
package western{
class Boisson { 
  -{static} boissons
  +{static} of(nom : String genre : Genre ) : Boisson
  - <<create>> Boisson(nom : String genre : Genre ) 
  + getNom() : String
  + getGenre() : Genre
  + getNomAvecArticleIndefini() : String
  + getNomAvecArticlePartitif() : String
  + getNomAvecArticleDefini() : String
  + getNomAvecPreposition(preposition : String ) : String
}

class Brigand { 
  #{static} LOOK_PAR_DEFAUT
  - look
  - recompense
  - estLibre
  - captives
  + <<create>> Brigand(nom : String ) 
  + <<create>> Brigand(nom : String boisson : Boisson ) 
  + <<create>> Brigand(nom : String boisson : Boisson look : String ) 
  + getLook() : String
  + getRecompense() Integer
  + estLibre() Boolean
  + kidnapper(dame : Dame ) 
  + getCaptives() : Dame[*]
  + seFaireCapturer(cowBoy : Cowboy ) 
  + seFaireTirerDessus(cowBoy : Cowboy ) 
  + getPseudo() : String
  + sePresenter() 
  +{static} getBoissonParDefaut() : Boisson
  +{static} setBoissonParDefaut(boisson : Boisson ) 
}

class Cowboy { 
  - gains
  - captures
  + <<create>> Cowboy(nom : String ) 
  + <<create>> Cowboy(nom : String boisson : Boisson ) 
  + getPseudo() : String
  + liberer(dame : Dame ) 
  + liberer(captives : Dame [*]) 
  + capturer(horsLaLoi : HorsLaLoi ) 
  + tirerSur(brigand : HorsLaLoi ) 
  + sePresenter() 
  +{static} getBoissonParDefaut() : Boisson
  +{static} setBoissonParDefaut(boisson : Boisson ) 
}

class Dame { 
  - estLibre
  + <<create>> Dame(nom : String ) 
  + <<create>> Dame(nom : String boisson : Boisson ) 
  + getPseudo() : String
  + seFaireKidnapper(horsLaLoi : HorsLaLoi ) 
  + seFaireLiberer(cowBoy : Cowboy ) 
  + estLibre() Boolean
  + sePresenter() 
  +{static} getBoissonParDefaut() : Boisson
  +{static} setBoissonParDefaut(boisson : Boisson ) 
  + getRavisseur() : HorsLaLoi
}

class Histoire4 { 
  + <<create>> Histoire4() 
  +{static} main(args : String [*]) 
}

class Narrateur { 
  + <<create>> Narrateur() 
  + <<create>> Narrateur(nom : String ) 
  + dire(texte : String ) 
  + boire(boisson : Boisson ) 
  + boire() 
  + getPseudo() : String
}

class Personnage { 
  - nom
  + <<create>> Personnage(nom : String ) 
  + <<create>> Personnage(nom : String boisson : Boisson ) 
  + dire(texte : String ) 
  + sePresenter() 
  + boire(boisson : Boisson ) 
  + boire() 
  + getNom() : String
  + getBoisson() : Boisson
  +{static} getPseudos(personnages : Nommable [*]) : String
  +{static} getBoissonParDefaut() : Boisson
}

class Ripou { 
  + <<create>> Ripou(nom : String ) 
  + <<create>> Ripou(nom : String boisson : Boisson ) 
  + <<create>> Ripou(nom : String boisson : Boisson look : String ) 
  + getLook() : String
  + estLibre() Boolean
  + getRecompense() Integer
  + kidnapper(dame : Dame ) 
  + getCaptives() : Dame[*]
  + seFaireCapturer(cowBoy : Cowboy ) 
  + seFaireTirerDessus(cowBoy : Cowboy ) 
  + getPseudo() : String
  + sePresenter() 
  + liberer(dame : Dame ) 
}

class Sherif { 
  - wanted
  + <<create>> Sherif(nom : String ) 
  + <<create>> Sherif(nom : String boisson : Boisson ) 
  + getNom() : String
  + sePresenter() 
  + capturer(horsLaLoi : HorsLaLoi ) 
  + getWanted() : HorsLaLoi[*]
  + rechercher(horsLaLoi : HorsLaLoi ) 
  + isWanted(horsLaLoi : HorsLaLoi ) : Boolean
}

class Substantif { 
  - nom
  + <<create>> Substantif(nom : String genre : Genre ) 
  + getNom() : String
  + getGenre() : Genre
  + toString() : String
  +{static} isVowel(c :  ) Boolean
  +{static} startsWithVowel(s : String ) Boolean
  + getArticleIndefini() : String
  + avecArticleIndefini() : String
  +{static} getArticleDefini(genre : Genre ) : String
  + getArticleDefini() : String
  + avecArticleDefini() : String
  +{static} faireElision(article : String ) : String
  + elision() Boolean
  + getArticlePartitif() : String
  + avecArticlePartitif() : String
  + avecElision(article : String ) : String
  + avecPreposition(preposition : String ) : String
}

interface HorsLaLoi <<interface>> {
  +  estLibre() Boolean
  +  getRecompense() Integer
  +  kidnapper(dame : Dame ) 
  +  seFaireCapturer(cowBoy : Cowboy ) 
  +  seFaireTirerDessus(cowBoy : Cowboy ) 
  +  getLook() : String
  +  getCaptives() : Dame[*]
}

interface Nommable <<interface>> {
  +  getNom() : String
  +  getPseudo() : String
}

enum Genre <<enumerate>> {
  +{static} FEMININ
  +{static} MASCULIN
}

western.Boisson o-> "1 -substantif" western.Substantif

western.Boisson o-> "1 +EAU" western.Boisson

western.Brigand o-> "1 -gardien" western.Cowboy

western.Brigand o-> "1 -boissonParDefaut" western.Boisson

western.HorsLaLoi <|.. western.Brigand
western.Personnage <|-- western.Brigand
western.Cowboy o-> "1 -boissonParDefaut" western.Boisson

western.Personnage <|-- western.Cowboy
western.Dame o-> "1 -sauveur" western.Cowboy

western.Dame o-> "1 -ravisseur" western.HorsLaLoi

western.Dame o-> "1 -boissonParDefaut" western.Boisson

western.Personnage <|-- western.Dame
western.Personnage <|-- western.Narrateur
western.Personnage o-> "1 -BOISSON_PAR_DEFAUT" western.Boisson

western.Personnage o-> "1 -boisson" western.Boisson

western.Nommable <|.. western.Personnage
western.Ripou o-> "1 -brigand" western.Brigand

western.HorsLaLoi <|.. western.Ripou
western.Cowboy <|-- western.Ripou
western.Sherif o-> "1 -cowboy" western.Cowboy

western.Cowboy <|-- western.Sherif
western.Substantif o-> "1 -genre" western.Genre

}
@enduml
